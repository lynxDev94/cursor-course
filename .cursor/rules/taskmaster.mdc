# Task Master Development Workflow

## Core Commands

- **Initialize**: `npx task-master-ai init` (requires Node.js 20+)
- **List tasks**: `npx task-master-ai list`
- **Next task**: `npx task-master-ai next`
- **Add task**: `npx task-master-ai add-task --prompt="description"`
- **Update task**: `npx task-master-ai update-task --id=1 --prompt="changes"`
- **Set status**: `npx task-master-ai set-status --id=1 --status=done`

## Task Structure

```json
{
  "id": "1",
  "title": "Task Title",
  "description": "Brief description",
  "status": "pending|in-progress|done|deferred",
  "dependencies": ["1", "2"],
  "priority": "high|medium|low",
  "details": "Implementation details",
  "testStrategy": "How to verify completion"
}
```

## Workflow

1. **Initialize project** (one-time setup)
2. **Parse PRD** to generate initial tasks
3. **List tasks** to see current status
4. **Get next task** to determine what to work on
5. **Implement** following task details
6. **Mark complete** when done
7. **Update dependent tasks** if needed

## Node.js Requirement

**Important**: Task Master requires Node.js 20+ due to modern dependencies. Upgrade Node.js before using Task Master commands.

*   CLI commands: See [`commands.mdc`](mdc:.cursor/rules/commands.mdc)
*   MCP server: See [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc)
*   Task structure: See [`tasks.mdc`](mdc:.cursor/rules/tasks.mdc)
*   Workflow: See [`dev_workflow.mdc`](mdc:.cursor/rules/dev_workflow.mdc)
